#
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Stage a new root and targets on a new branch

permissions: read-all

# Execute this ONLY as workflow dispatch.
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to stage changes against, generally ceremony/YYYY-MM-DD'
        required: true
        type: string
      revoke_key:
        description: 'If provided, revokes the given HSM key, identified by the serial number'
        required: false
        type: string
      repo:
        description: 'The repository in which to stage a new root and targets'
        required: false
        default: repository
        type: string
      draft:
        description: 'Use for testing; creates a draft pull request'
        required: false
        default: false
        type: boolean

jobs:
  check_branch:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # v3.4.0
        with:
          fetch-depth: 0
      - name: Check if remote branch exists
        env:
          BRANCH: ${{ inputs.branch }}
        run: |
          branch_exists=$(git ls-remote --heads origin ${BRANCH})

          if [[ -z ${branch_exists} ]]; then
            echo "Staging root branch ${BRANCH} does not exist: has a maintainer created one?"
            exit 1
          fi

  init_root:
    runs-on: ubuntu-20.04
    needs: check_branch
    permissions:
      id-token: 'write'
    steps:
      - uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # v3.4.0
        with:
          fetch-depth: 0
      # TODO(https://github.com/sigstore/root-signing/issues/98): Use a common configuration checked into source control
      - name: setup environment
        run: |
          echo "GITHUB_USER=${{ github.actor }}" >> $GITHUB_ENV
          echo "SNAPSHOT_KEY=gcpkms://projects/sigstore-root-signing/locations/global/keyRings/root/cryptoKeys/snapshot" >> $GITHUB_ENV
          echo "TIMESTAMP_KEY=gcpkms://projects/sigstore-root-signing/locations/global/keyRings/root/cryptoKeys/timestamp" >> $GITHUB_ENV
          echo "REPO=${{ inputs.repo }}" >> $GITHUB_ENV
          echo "BRANCH=${{ inputs.branch }}" >> $GITHUB_ENV
          # Note: we set LOCAL=1 because we manually push the changes in the next job.
          echo "LOCAL=1" >> $GITHUB_ENV
      - uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version: '1.20'
          check-latest: true
      - uses: google-github-actions/setup-gcloud@62d4898025f6041e16b1068643bfc5a696863587 # v1.1.0
        with:
          project_id: sigstore-root-signing
      # Setup OIDC->SA auth
      - uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d # v1.0.0
        id: auth
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/163070369698/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
          service_account: 'github-actions@sigstore-root-signing.iam.gserviceaccount.com'
          create_credentials_file: true
      - name: Login
        run: |
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud auth list

      # Initialize the new root and targets layout
      - name: step 0
        # Note that we are already in a git repository and are manually pushing changes with the job below
        # so we can simply build the TUF binary and bypass git setup in step 0.
        run: |
          sudo apt-get install libpcsclite-dev
          go build -o tuf -tags=pivkey ./cmd/tuf
      - name: step 1.5
        run: |
          ./scripts/step-1.5.sh ${{ inputs.revoke_key }}
      - name: Upload new repository
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: ${{ inputs.repo }}
          path: ${{ inputs.repo }}
          retention-days: 5

  push:
    needs: init_root
    runs-on: ubuntu-20.04
    permissions:
      pull-requests: 'write'
      contents: 'write'
    steps:
      - uses: actions/checkout@24cb9080177205b6e8c946b17badbe402adc938f # v3.4.0
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v2.1.0
        with:
          name: ${{ inputs.repo }}
          path: ${{ inputs.repo }}
      # Detect new version and expiration to add to the PR description.
      - name: Detect new version
        env:
          REPO: ${{ inputs.repo }}
        run: |
          # Detects the new root version.
          VERSION=$(cat ${REPO}/staged/root.json | jq -r '.signed.version')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Create commits
      - name: Create commits
        env:
          REPO: ${{ inputs.repo }}
        run: |
          # Set identity.
          git config --global user.email "noreply@github.com"
          git config --global user.name "GitHub"

          # Commit the REPO changes
          git add ${REPO}
          git commit -s -m "Add staged repository metadata"

      # Open pull request changes. Use the fine-grained PAT in order to trigger presubmits.
      - name: create pull request
        uses: peter-evans/create-pull-request@38e0b6e68b4c852a5500a94740f0e535e0d7ba54 # v4.2.4
        with:
          commit-message: update root and targets
          title: Update Root and Targets to version ${{ env.VERSION }}
          body: Initializes a new root and targets to version ${{ env.VERSION }}
          branch: init-root-targets
          base: ${{ inputs.branch }}
          signoff: true
          draft: ${{ inputs.draft }}
          reviewers: asraa,dlorenc,haydentherapper,joshuagl
          token: ${{ secrets.SIGSTORE_ROOT_SIGNING_FINE_GRAINED_PAT }}
