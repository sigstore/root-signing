#
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Stage a new root and targets on a new branch

permissions: read-all

# Execute this ONLY as workflow dispatch.
on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to stage changes against, generally ceremony/YYYY-MM-DD'
        required: true
        type: string
      revoke_key:
        description: 'If provided, revokes the given HSM key, identified by the serial number'
        required: false
        type: string
      repo:
        description: 'The repository in which to stage a new root and targets'
        required: false
        default: repository
        type: string
      draft:
        description: 'Use for testing; creates a draft pull request'
        required: false
        default: false
        type: boolean

jobs:
  check_branch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
      - name: Check if remote branch exists
        env:
          BRANCH: ${{ inputs.branch }}
        run: |
          branch_exists=$(git ls-remote --heads origin ${BRANCH})

          if [[ -z ${branch_exists} ]]; then
            echo "Staging root branch ${BRANCH} does not exist: has a maintainer created one?"
            exit 1
          fi

  init_root:
    runs-on: ubuntu-latest
    needs: check_branch
    permissions:
      id-token: 'write'
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0
      # TODO(https://github.com/sigstore/root-signing/issues/98): Use a common configuration checked into source control
      - name: setup environment
        run: |
          echo "GITHUB_USER=${{ github.actor }}" >> $GITHUB_ENV
          echo "SNAPSHOT_KEY=gcpkms://projects/sigstore-root-signing/locations/global/keyRings/root/cryptoKeys/snapshot" >> $GITHUB_ENV
          echo "TIMESTAMP_KEY=gcpkms://projects/sigstore-root-signing/locations/global/keyRings/root/cryptoKeys/timestamp" >> $GITHUB_ENV
          echo "REPO=${{ inputs.repo }}" >> $GITHUB_ENV
          echo "BRANCH=${{ inputs.branch }}" >> $GITHUB_ENV
          # Note: we set LOCAL=1 because we manually push the changes in the next job.
          echo "LOCAL=1" >> $GITHUB_ENV
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version-file: './go.mod'
          check-latest: true
      # Setup OIDC->SA auth for signing with KMS
      - uses: google-github-actions/auth@62cf5bd3e4211a0a0b51f2c6d6a37129d828611d # v2.1.5
        id: auth
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/163070369698/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
          service_account: 'github-actions@sigstore-root-signing.iam.gserviceaccount.com'
          create_credentials_file: true
      - uses: google-github-actions/setup-gcloud@f0990588f1e5b5af6827153b93673613abdc6ec7 # v2.1.1
        with:
          project_id: sigstore-root-signing
      - name: Login
        run: |
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud auth list

      # Initialize the new root and targets layout
      - name: step 0
        # Note that we are already in a git repository and are manually pushing changes with the job below
        # so we can simply build the TUF binary and bypass git setup in step 0.
        run: |
          sudo apt-get install libpcsclite-dev
          go build -o tuf -tags=pivkey ./cmd/tuf
      - name: step 1.5
        run: |
          ./scripts/step-1.5.sh ${{ inputs.revoke_key }}
      - name: Upload new repository
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4.3.6
        with:
          name: ${{ inputs.repo }}
          path: ${{ inputs.repo }}
          retention-days: 5

  push:
    needs: init_root
    runs-on: ubuntu-latest
    permissions:
      pull-requests: 'write'
      contents: 'write'
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ inputs.branch }}
          fetch-depth: 0
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: ${{ inputs.repo }}
          path: ${{ inputs.repo }}
      # Detect new version and expiration to add to the PR description.
      - name: Detect new version
        env:
          REPO: ${{ inputs.repo }}
        run: |
          # Detects the new root version.
          VERSION=$(cat ${REPO}/staged/root.json | jq -r '.signed.version')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Create commits
      - name: Create commits
        env:
          REPO: ${{ inputs.repo }}
        run: |
          # Set identity.
          git config --global user.email "noreply@github.com"
          git config --global user.name "GitHub"

          git checkout -b init-root-targets
          # Commit the REPO changes
          git add ${REPO}
          git commit -s -m "Add staged repository metadata"
          git push origin HEAD

      # Open pull request changes. Use the fine-grained PAT in order to trigger presubmits.
      - name: create pull request
        env:
          DRAFT: ${{ inputs.draft && '-d' || '' }}
        run:
          GH_TOKEN=${{ secrets.SIGSTORE_ROOT_SIGNING_FINE_GRAINED_PAT }} gh pr create -B ${{ inputs.branch }} -H init-root-targets -t "Update Root and Targets to version ${{ env.VERSION }}" -b "Initializes a new root and targets to version ${{ env.VERSION }}" ${DRAFT} -r bobcallaway -r haydentherapper -r kommendorkapten
