#
# Copyright 2021 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Snapshot and Timestamp Template

# Reusable workflow that runs snapshot and timestamp on directories.
# TODO(asraa): Create user workflows for repository-beta/, and ceremony/ flows.
on:
  workflow_call:
    secrets:
      token:
        description: >
          Optional token.
          This argument is passed, unchanged, to the job that creates the pull request.
        required: false
    inputs:
      snapshot_key:
        description: 'Sets the snapshotting key reference'
        required: false
        type: string
      timestamp_key:
        description: 'Sets the timestamping key reference'
        required: true
        type: string
      branch:
        description: 'The branch where the staged repository is, e.g. ceremony/2022-10-18'
        required: true
        type: string
      repo:
        description: 'Sets the repository to perform the operation on: expects relative path to GitHub repository, for example: repository'
        required: false
        default: repository
        type: string
      provider:
        description: 'Sets the workflow identity provider'
        required: true
        type: string
      service_account:
        description: 'Sets the GitHub service account authorized for keys'
        required: true
        type: string
      snapshot_timestamp:
        description: 'Enables snapshot/timestamp step. During ceremonies, you may flip this to false to allow for just a publish step.'
        required: false
        default: true
        type: boolean
      disable_snapshot:
        description: 'Disables snapshot and only generates timestamp.'
        required: false
        default: false
        type: boolean
      publish:
        description: 'Enables publishing step. During ceremonies, you may flip this to false to allow for reviewing changes before publishing.'
        required: false
        default: true
        type: boolean

jobs:
  snapshot_and_timestamp:
    runs-on: ubuntu-latest
    permissions:
      id-token: 'write'
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch }}
      - name: setup
        run: |
          echo "GITHUB_USER=${{ github.actor }}" >> $GITHUB_ENV
          echo "REPO=$(pwd)/${{ inputs.repo }}" >> $GITHUB_ENV
          echo "SNAPSHOT_KEY=${{ inputs.snapshot_key }}" >> $GITHUB_ENV
          echo "TIMESTAMP_KEY=${{ inputs.timestamp_key }}" >> $GITHUB_ENV
          echo "BRANCH=${{ inputs.branch }}" >> $GITHUB_ENV
          # Note: we set LOCAL=1 because we manually push the changes in the next job.
          echo "LOCAL=1" >> $GITHUB_ENV
      - uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version: '1.20'
          check-latest: true
      - uses: google-github-actions/setup-gcloud@e30db14379863a8c79331b04a9969f4c1e225e0b # v1.1.1
        with:
          project_id: sigstore-root-signing
      # Setup OIDC->SA auth
      - uses: google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033 # v1.1.1
        id: auth
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ inputs.provider }}
          service_account: ${{ inputs.service_account }}
          create_credentials_file: true
      - name: Login
        run: |
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud auth list

      # Build binary
      - name: build
        run: |
          sudo apt-get install libpcsclite-dev
          go build -o tuf -tags=pivkey ./cmd/tuf/

      - name: setup timestamping
        if: ${{ inputs.disable_snapshot }}
        run: |
          echo "DISABLE_SNAPSHOT=1" >> $GITHUB_ENV

      # Snapshot and timestamp
      - name: snapshot and timestamp
        if: ${{ inputs.snapshot_timestamp }}
        run: |
          ./scripts/step-3.sh

      # Publish
      - name: publish
        if: ${{ inputs.publish }}
        run: |
          ./scripts/step-4.sh

      - name: get patch
        run: |
          # Setting git config is only needed to create the patch to download in the next step.
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          # Commit and create patch
          git add .
          git commit -m "snapshot and timestamp"
          git format-patch HEAD^ -o snapshot-timestamp

      - name: Upload snapshot and timestamp
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: snapshot-timestamp
          path: snapshot-timestamp
          retention-days: 5

  if-failed:
    runs-on: ubuntu-latest
    needs: [snapshot_and_timestamp]
    permissions:
      issues: 'write'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_REPOSITORY: sigstore/root-signing
    if: always() && needs.snapshot_and_timestamp.result == 'failure'
    steps:
      - name: Create issue on failure
        uses: sigstore/sigstore-probers/.github/actions/create-issue@main
        with:
          issue_repository: sigstore/root-signing
          issue_type: FAILURE

  if-pass:
    runs-on: ubuntu-latest
    needs: [snapshot_and_timestamp]
    permissions:
      issues: 'write'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_REPOSITORY: sigstore/root-signing
    if: always() && needs.snapshot_and_timestamp.result == 'success'
    steps:
      - name: Create issue on failure
        uses: sigstore/sigstore-probers/.github/actions/create-issue@main
        with:
          issue_repository: sigstore/root-signing
          issue_type: SUCCESS

  push:
    needs: snapshot_and_timestamp
    runs-on: ubuntu-latest
    permissions:
      pull-requests: 'write'
      contents: 'write'
    steps:
      - uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v2.1.0
        with:
          name: snapshot-timestamp
          path: snapshot-timestamp
      - run: |
          git apply --verbose snapshot-timestamp/*
          rm -r snapshot-timestamp
      # Open pull request changes
      - name: create pull request for no snapshot
        if: ${{ inputs.disable_snapshot }}
        uses: peter-evans/create-pull-request@153407881ec5c347639a548ade7d8ad1d6740e38 # v5.0.2
        with:
          commit-message: update timestamp
          title: Update Timestamp
          body: Sign timestamp file
          branch: update-snapshot-timestamp
          signoff: true
          reviewers: asraa,bobcallaway,haydentherapper,kommendorkapten
          token: ${{ secrets.token || secrets.GITHUB_TOKEN }}
          base: ${{ inputs.branch }}
      - name: create pull request for timestamp/snapshot
        if: ${{ !inputs.disable_snapshot }}
        uses: peter-evans/create-pull-request@153407881ec5c347639a548ade7d8ad1d6740e38 # v5.0.2
        with:
          commit-message: update snapshot and timestamp
          title: Update Snapshot and Timestamp
          body: Sign snapshot and timestamp files
          branch: update-snapshot-timestamp
          signoff: true
          reviewers: asraa,bobcallaway,haydentherapper,kommendorkapten
          token: ${{ secrets.token || secrets.GITHUB_TOKEN }}
          base: ${{ inputs.branch }}

  if-push-failed:
    runs-on: ubuntu-latest
    needs: [push]
    permissions:
      issues: 'write'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_REPOSITORY: sigstore/root-signing
    if: always() && needs.push.result == 'failure'
    steps:
      - name: Create issue on failure
        uses: sigstore/sigstore-probers/.github/actions/create-issue@main
        with:
          issue_repository: sigstore/root-signing
          issue_type: FAILURE

  if-push-pass:
    runs-on: ubuntu-latest
    needs: [push]
    permissions:
      issues: 'write'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_REPOSITORY: sigstore/root-signing
    if: always() && needs.push.result == 'success'
    steps:
      - name: Create issue on failure
        uses: sigstore/sigstore-probers/.github/actions/create-issue@main
        with:
          issue_repository: sigstore/root-signing
          issue_type: SUCCESS
