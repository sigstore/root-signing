#
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Stage a new root and targets

permissions: read-all

# Execute this ONLY as workflow dispatch.
on:
  workflow_dispatch:
    inputs:
      revoke_key:
        description: 'If provided, revokes the given HSM key, identified by the serial number'
        required: false
        type: string
      prev_repo:
        description: 'Chains the new root from this previous repository'
        required: false
        default: repository/
        type: string
      draft:
        description: 'Use for testing; creates a draft pull request'
        required: false
        default: false
        type: boolean

jobs:
  init_root:
    runs-on: ubuntu-20.04
    permissions:
      id-token: 'write'
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
        with:
          fetch-depth: 0
      # TODO(https://github.com/sigstore/root-signing/issues/98): Use a common configuration checked into source control
      - name: setup environment
        run: |
          echo "GITHUB_USER=${{ github.actor }}" >> $GITHUB_ENV
          echo "SNAPSHOT_KEY=gcpkms://projects/sigstore-root-signing/locations/global/keyRings/root/cryptoKeys/snapshot" >> $GITHUB_ENV
          echo "TIMESTAMP_KEY=gcpkms://projects/sigstore-root-signing/locations/global/keyRings/root/cryptoKeys/timestamp" >> $GITHUB_ENV
          echo "PREV_REPO=${{ inputs.prev_repo }}" >> $GITHUB_ENV
          # Note: we set LOCAL=1 because we manually push the changes in the next job.
          echo "LOCAL=1" >> $GITHUB_ENV
      - uses: actions/setup-go@d0a58c1c4d2b25278816e339b944508c875f3613 # v2.2.0
        with:
          go-version: 1.18.x
      - uses: google-github-actions/setup-gcloud@d51b5346f85640ec2aa2fa057354d2b82c2fcbce # v1.0.1
        with:
          project_id: sigstore-root-signing
      # Setup OIDC->SA auth
      - uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d # v1.0.0
        id: auth
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/163070369698/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider'
          service_account: 'github-actions@sigstore-root-signing.iam.gserviceaccount.com'
          create_credentials_file: true
      - name: Login
        run: |
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud auth list

      # Initialize the new root and targets layout
      - name: step 0
        # Note that we are already in a git repository and are manually pushing changes with the job below
        # so we can simply build the TUF binary and bypass git setup in step 0.
        run: |
          sudo apt-get install libpcsclite-dev
          go build -o tuf -tags=pivkey ./cmd/tuf
      - name: step 1.5
        run: |
          ./scripts/step-1.5.sh ${{ inputs.revoke_key }}
      - name: Upload new repository
        uses: actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb # v2.3.1
        with:
          name: ceremony
          path: ceremony/
          retention-days: 5

  push:
    needs: init_root
    runs-on: ubuntu-20.04
    permissions:
      pull-requests: 'write'
      contents: 'write'
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7 # v2.1.0
        with:
          name: ceremony
          path: ceremony/
      # Detect new version and expiration to add to the PR description.
      - name: Detect new version
        run: |
          # Detects the ceremony date.
          DATE=$(git status -s | grep --regexp=ceremony/* | cut -f2 -d /)
          echo "DATE=$DATE" >> $GITHUB_ENV

          # Detects the new root version.
          VERSION=$(cat ceremony/${DATE}/staged/root.json | jq -r '.signed.version')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Create commits
      - name: Create commits
        run: |
          # Set identity.
          git config --global user.email "noreply@github.com"
          git config --global user.name "GitHub"

          # First commit the old repository data.
          git add ceremony/"${DATE}"/repository/ ceremony/"${DATE}"/keys/
          git commit -s -m "Copy current repository metadata and keys"

          # Now put the staged metadata into a second commit
          git add ceremony/"${DATE}"/staged/
          git commit -s -m "Add staged repository metadata"

      # Open pull request changes
      - name: create pull request
        uses: peter-evans/create-pull-request@2b011faafdcbc9ceb11414d64d0573f37c774b04 # v4.2.3
        with:
          commit-message: update root and targets
          title: Update Root and Targets to version ${{ env.VERSION }}
          body: Initializes a new root and targets to version ${{ env.VERSION }}
          branch: init-root-targets
          signoff: true
          draft: ${{ inputs.draft }}
          reviewers: asraa,dlorenc,haydentherapper,joshuagl
