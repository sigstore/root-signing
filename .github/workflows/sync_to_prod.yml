#
# Copyright 2022 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Sync Preprod Repository with GCS Prod Bucket

on:
  schedule:
    - cron: '0 */12 * * *' # every 12 hours
  workflow_dispatch:
    inputs:
      trigger_sync:
        description: 'Whether to manually trigger a sync, otherwise only syncs pre-prod to prod with a 2 day delay'
        required: false
        default: false
        type: boolean

jobs:
  sync:
    if: (github.event_name == 'schedule' && github.repository == 'sigstore/root-signing') || (github.event_name != 'schedule')  # Don't run workflow in forks on cron
    runs-on: ubuntu-20.04
    permissions:
      id-token: 'write'
    steps:
      - uses: google-github-actions/setup-gcloud@d51b5346f85640ec2aa2fa057354d2b82c2fcbce # v1.0.1
        with:
          project_id: project-rekor
      # Setup OIDC->SA auth
      - uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d # v1.0.0
        id: auth
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/237800849078/locations/global/workloadIdentityPools/root-signing-pool/providers/sigstore-root'
          service_account: 'sigstore-root-signing@project-rekor.iam.gserviceaccount.com'
          create_credentials_file: true
      - name: login
        run: |
          gcloud auth login --brief --cred-file="${{ steps.auth.outputs.credentials_file_path }}"
          gcloud auth list

      - name: Install tools
        run: |
          sudo apt-get install -y jq
      - name: check sync conditions
        run: |
          # Determine whether a sync is necessary
          difference() {
            input_date=$(date -d $1 +%s)
            now=$(date +%s)
            echo $(( ($now - $input_date) / 86400 ))
          }

          # fetch creation time and hash for timestamp in preprod
          # timestamp is always updated on a sync, either from the weekly updates or the signing ceremony
          tsMetaPreprod=$(gcloud storage ls --json gs://sigstore-preprod-tuf-root/timestamp.json | jq .[0].metadata)
          timeCreatedPreprod=$(echo $tsMetaPreprod | jq -r .timeCreated)
          md5HashPreprod=$(echo $tsMetaPreprod | jq -r .md5Hash)

          # fetch hash for timestamp in prod
          tsMetaProd=$(gcloud storage ls --json gs://sigstore-tuf-root/timestamp.json | jq .[0].metadata)
          md5HashProd=$(echo $tsMetaProd | jq -r .md5Hash)

          # if less than 2 days since updates were published to preprod, do not update
          daysDiff=$(difference $timeCreatedPreprod)
          if (($daysDiff < 2)); then
            exit 0
          fi
          # exit early if already updated
          if [[ "$md5HashPreprod" == "$md5HashProd" ]]; then
            exit 0
          fi
          # otherwise, indicate that a sync is needed
          echo "trigger_sync=true" >> ${GITHUB_ENV}
      - name: sync
        if: ${{ github.event.inputs.trigger_sync || env.trigger_sync == 'true' }}
        run: |
          # download preprod bucket and copy over to production bucket
          gcloud --quiet storage cp -r gs://sigstore-preprod-tuf-root/ .

          # upload all but TUF timestamp. Once timestamp is uploaded, all other files must have been uploaded.
          for f in $(ls sigstore-preprod-tuf-root/ -I *timestamp.json)
          do
            gcloud --quiet storage cp --cache-control=no-store -r sigstore-preprod-tuf-root/$f gs://sigstore-tuf-root/
          done
          # upload timestamp
          gcloud --quiet storage cp --cache-control=no-store -r sigstore-preprod-tuf-root/*timestamp.json gs://sigstore-tuf-root/

          # delete any files present in sigstore-tuf-root not in sigstore-preprod-tuf-root
          gcloud --quiet storage cp -r gs://sigstore-tuf-root/ .

          diff -qr sigstore-preprod-tuf-root sigstore-tuf-root | while read l; do
            if [[ $l =~ "Only in sigstore-tuf-root" ]]; then
              path=$(python3 -c "import re; s='$l'; pattern=r'^Only in sigstore-tuf-root(\/?)(.*): (.*)$'; match=re.search(pattern, s); print('/'.join([match.group(2), match.group(3)]).lstrip('/'))")
              gcloud --quiet storage rm gs://sigstore-tuf-root/$path
            fi;
          done

  if-failed:
    runs-on: ubuntu-latest
    needs: [sync]
    permissions:
      issues: 'write'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_REPOSITORY: sigstore/root-signing
    if: always() && needs.sync.result == 'failure'
    steps:
      - uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0
      - run: |
          set -euo pipefail
          ./.github/workflows/scripts/report-failure.sh
